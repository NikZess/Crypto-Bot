from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message

from utils.parsing_crypto import get_price

from filters.chat_type import ChatTypeFilter

from kbds.reply import get_keyboard, del_kb

from database.models import User
from sqlalchemy import select

from sqlalchemy.ext.asyncio import AsyncSession


user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))

@user_private_router.message(CommandStart())
async def start_cmd_handler(message: types.Message):
    await message.answer("üñêÔ∏è–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫—Ä–∏–ø—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç \n—É–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ –±–∏—Ä–∂–µ Binance üíµ")
    
@user_private_router.message(Command("crypto"))
async def crypto_cmd_handler(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    
    query = select(User).where(User.user_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç

    if user is None:
        await message.reply("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞ ü§ñ \n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∏")
    else:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É",
            reply_markup=get_keyboard(
                "/BTCUSDT",
                "/TONUSDT",
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É",
                sizes=(1,)
            )
        )
        
@user_private_router.message(Command("BTCUSDT"))
async def get_price_btc_handler(message: types.Message):
    price = get_price("BTCUSDT")
    
    if price is not None:
        await message.answer(f"–¶–µ–Ω–∞ BTC: {price} USDT", reply_markup=del_kb)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.")

@user_private_router.message(Command("TONUSDT"))
async def get_price_btc_handler(message: types.Message):
    price = get_price("TONUSDT")
    
    if price is not None:
        await message.answer(f"–¶–µ–Ω–∞ TON: {price} USDT", reply_markup=del_kb)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.")
        


        
